#!/bin/bash
#This is used instead of pkg_mkIndex in order to:
# - define applib_library as the path to wherever this library is found
# - cause init.tcl to be loaded upon require, but
# - have the other modules loaded only when called
# - include procedures defined by means other than proc (like report::report)
#
# In order to work, all module procedures must be defined as external using:
# 'namespace export' on a line all by itself in the tcl file (we just grep
# for the line).  Also, the namespace of the procedures in the module must 
# be the same as the name of the file.
#
# If the procedures are global, use a dummy line:
# #provides: proc1 proc2 proc3 ...

pf=pkgIndex.tcl
libname=sitelib
version=1
src=""; srcdir=""; srctail=""

if [ "$1" != "" ]; then
    libname="$1"
fi

if [ "$2" != "" ]; then
    version="$2"
fi

if [ "$3" != "" ]; then
    src="$3"; srcdir="${src}/"; srctail="/${src}"
fi

if [ -f ${srcdir}init.tcl ]; then
    init="[list source [file join \$dir $src init.tcl]]\n"
else
    init=""
fi

cat >$pf <<EOF
#This file is automatically generated by wmmkpkg.

package ifneeded $libname $version [list set ${libname}_library \$dir${srctail}]\n$init[list tclPkgSetup \$dir${srctail} $libname $version {
EOF
#echo "${srcdir}lib${libname}.so"

#Look in any binary source files for exported commands
if [ -f ${srcdir}lib${libname}.so -o -h ${srcdir}lib${libname}.so ]; then
    echo -n "    {${srcdir}lib${libname}.so load {" >>$pf
    grep 'Tcl_CreateObjCommand' ${srcdir}c/*.c ${srcdir}c/*.cpp 2>/dev/null |\
        while IFS=, read j1 proc func j2; do
#echo "j1:$j1 proc:$proc func:$func j2:$j2"
            proc=$(echo $proc | tr -d '"')
            echo -n "$proc " >>$pf
        done;
    echo "}}" >>$pf
fi

#First check to see that all 'package provide' statements look right
grep 'package provide' ${srcdir}*.tcl |\
    while read fname junk lib vers; do
#echo "fname:$fname lib:$lib vers:$vers"
        if [ "$lib" != "$libname" ]; then
            echo "package provide in $fname ($lib) doesn't reference $libname"
            exit 1
        fi
        if [ "$vers" != "$version" ]; then
            echo "package version in $fname ($vers) doesn't match $version"
            exit 1
        fi
    done;

#Now include all exported procedures in pkgIndex.tcl
fnlist=''
for fname in ${srcdir}*.tcl; do
    read j1 j2 ns j3 <<<"$(cat $fname |grep 'namespace eval')"	#figure out the namespace this file make procedures for
    base=$(basename $fname .tcl)
#echo "fname:$fname base:$base ns:$ns"
    if [ "$base" = "init" -o "$base" = "pkgIndex" ]; then continue; fi
    fnlist="$fnlist $base"
    v=procs_$base				#make a variable to accumulate procs in this file
    for proc in $(grep '^[ ]*namespace export' $fname |sed -e 's/namespace export//'); do	#find the procs exported in this namespace
        eval ${v}=\"$(eval echo \$$v) ::$ns::$proc\"
#echo "  proc:$proc $v:$(eval echo \$$v)"
    done
    for proc in $(grep '^#provides:' $fname |sed -e 's/#provides://'); do	#find the global procs exported in this file
        eval ${v}=\"$(eval echo \$$v) $proc\"
#echo "  proc:$proc $v:$(eval echo \$$v)"
    done
done
#echo "fnlist:$(echo $fnlist |sort)"

for ns in $(echo $fnlist |sort); do
        echo -n "    {${ns}.tcl	source {" >>$pf
        for p in $(eval echo \$procs_$ns); do
            echo -n "$p " >>$pf
        done
        echo "}}" >>$pf
    done;
echo -e '}]' >>$pf
