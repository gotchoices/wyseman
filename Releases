Change Log:

1.0.12	2019-Oct
	- Work with permission improvements in wyselib
	- Improved logging
	- More secure validation checks on login
	- Enhanced logic operators
	- Login connection made as individual users

1.0.8	2019-Feb
	- Support for authenticated login over SSL
	- Initial login from ticket
	- Subsequent logins from signed message from private key
	- Add CLI utility for generating access tickets

1.0.0	2018-Dec	Release 6: Node.js 1.0.0
	- Run-time support added for javascript programs.
	- Enhancements to support more robust Wylib data dictionary
	- Initial support for a user-defined control layer
	- Depending on the view, apps can access reports, previews, etc.
	- License changed from GPL-3 to MIT
	
0.1.0	2017	Release 5: Resurrection
	Ported main command line program to ruby.  Package is a gem.
	
	Also, after parsing the text files, the sql create/drop code is now 
	loaded into the database in a special schema area and sql queries 
	are used to produce the list of objects to rebuild given a certain 
	drop/create sequence.
	
	There is still a TCL run-time library "wyseman" that can be called
	from TCL apps to access the data dictionary.  This is how the 
	bin/wysegi app still works.  But there is now also a ruby run-time.
	
	But when managing schema changes, TCL is now used only to parse the 
	schema description files.  Ruby is the glue that holds the app 
	together.  And most of the heavy lifting occurs right inside 
	Postgresql.  For example, all schema items get dropped/rebuilt
	in plpgsql so they are fully atomic.  If your table restore fails,
	the drop gets rolled back too!

0.40	2007?	Release 4:
        Changed to allow objects to be created in postgres namespaces
        (schemas).  Many changes were made to the wyseman system catalog
        tables and columns.  The interface for user programs should have
        remained largely the same.

0.33?	2006?	Release 3	
        Many bug fixes, many feature additions

0.32?	2005?	Release 2	
	This release is updated for use with Postgres 8.1.0 which changed
	fundamentally the way users and groups exist in the database.
	Users and groups (roles) are now stored in the same table (pg_roles).
	This shouldn't be a problem (as long as you avoid a username that
	could be mistaken for a valid group name).
	
	Postgres also changed the way sequences work.  Typically you might
	create a sequence and a table in association with each other.  Some
	field in the table will draw values from the sequence in order to
	populate itself.  Previously, wylib expected you to declare the 
	sequence as being dependent upon the table (since it was then 
	possible to create a table which referenced a non-existent sequence).
	Then, we would populate the "create" field of the object with code
	that would also initialize the sequence to a good number (like the
	max value of the field that uses it).  That way, you would build
	the table, re-populate it with data, and then call the sequence
	creation code to get it initialized to a value appropriate to the
	pre-existing data in the table.

	This is no longer possible, so you must now declare the table to
	be dependent upon the sequence (so the sequences get built first).
	Then, after restoring data to the table, execute a script that will
	initialize the sequences to their proper values.  This is shown in
	the sample schema as "make sequence".

0.30	2004?	Initial open-source release of version 0.30
